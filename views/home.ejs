<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title><%=title%></title>
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">
  <link href="lib/noty.css" rel="stylesheet">
  <script src="lib/noty.js" type="text/javascript"></script>
  <style>
    body {
      background-color: #f8f9fa;
    }

    header {
      background-color: #75b3f0;
    }

    .navbar-brand {
      font-size: 1.5rem;
      font-weight: bold;
    }

    .navbar-toggler-icon {
      background-color: #fff;
    }

    .navbar-nav .nav-link {
      font-size: 1.2rem;
      margin-left: 1.5rem;
    }

    .display-1 {
      font-size: 4.5rem;
      font-weight: bold;
      color: #212529;
      margin-top: 5rem;
    }

    .container {
      margin-top: 5rem;
    }

    .btn-primary {
      background-color: #6c757d;
      border-color: #6c757d;
      font-size: 1.2rem;
      padding: 0.75rem 2.5rem;
    }

    .btn-primary:hover {
      background-color: #343a40;
      border-color: #343a40;
    }

    .creative-section {
      background-color: #f8f9fa;
      padding: 5rem 0;
      text-align: center;
    }

    .creative-text {
      font-size: 2rem;
      font-weight: bold;
      margin-bottom: 2rem;
    }

    .creative-icon {
      font-size: 5rem;
      color: #6c757d;
      margin-bottom: 1rem;
    }
  </style>
</head>
<body>
  <header>
    <nav class="navbar navbar-expand-lg navbar-light bg-dark">
      <a class="navbar-brand text-white" href="/home">Home</a>
      <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse justify-content-end" id="navbarNav">
        <ul class="navbar-nav">
          <li class="nav-item">
            <a class="nav-link text-white" href="/destroy-session">Sign Out</a>
          </li>
          <li class="nav-item">
            <a class="nav-link text-white" href="/reset-password">Reset Password</a>
          </li>
        </ul>
      </div>
    </nav>
  </header>

  <div class="container">
    <h1 class="display-1 text-center mt-5">Hiii....., <%=user.name%></h1>
    <div class="text-center mt-5">
      <a href="#!" class="btn btn-primary">Learn More</a>
    </div>
  </div>

  <section class="creative-section">
    <div class="container">
      <h2 class="creative-text">Unlock Your Creativity</h2>
      <i class="fas fa-paint-brush creative-icon"></i>
      <p>Node.js authentication is the process of verifying the identity of users accessing a web application or API built with Node.js. Authentication ensures that only authorized users can access protected resources and perform specific actions within the application.

        There are various authentication mechanisms and strategies available in Node.js, including:
        
        Username and password authentication: This is the most common form of authentication where users provide their credentials (username and password) to gain access to the application. Node.js frameworks such as Passport.js provide convenient ways to implement username and password authentication using different strategies like local authentication, OAuth, or OpenID.
        
        Token-based authentication: Token-based authentication involves generating and validating tokens to authenticate users. The most widely used token-based authentication scheme is JSON Web Token (JWT). With JWT, a server generates a token upon successful authentication, which is then included in subsequent requests from the client. The server validates the token to ensure the authenticity and authorization of the user.
        
        OAuth and OpenID: OAuth and OpenID are widely used authentication protocols that allow users to authenticate using their existing accounts on third-party services like Google, Facebook, or Twitter. These protocols enable secure and delegated access to user information without exposing their credentials to the application.
        
        Node.js provides a rich ecosystem of libraries and frameworks that simplify the implementation of authentication in web applications. Some popular libraries include Passport.js, which supports various authentication strategies, and bcrypt.js, which helps with secure password hashing and verification.
        
        When implementing authentication in Node.js, it is essential to consider security best practices, such as storing passwords securely by using hashing algorithms, implementing measures to prevent common vulnerabilities like SQL injection and cross-site scripting (XSS), and protecting against brute-force attacks and session hijacking.
        
        Overall, Node.js authentication is a critical aspect of building secure web applications, and developers have several options and tools at their disposal to implement robust and secure authentication mechanisms.</p>
      <a href="#!" class="btn btn-primary">Get Started</a>
    </div>
  </section>

  <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"></script>
</body>
</html>
